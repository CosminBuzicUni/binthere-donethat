{
	"info": {
		"_postman_id": "87654321-4321-4321-4321-210987654321",
		"name": "BinThere-DoneThat Complete API Workflow",
		"description": "Complete API testing collection for BinThere-DoneThat backend including authentication, prediction, and disposal confirmation. Tests the full user journey from registration to waste sorting.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "87654321"
	},
	"item": [
		{
			"name": "Authentication Flow",
			"item": [
				{
					"name": "1. Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response has user and token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('token');",
									"    pm.expect(jsonData.user).to.have.property('_id');",									"    pm.expect(jsonData.user).to.have.property('username');",
									"    pm.expect(jsonData.user).to.have.property('email');",
									"    pm.expect(jsonData.user).to.have.property('itemsSortedCount');",
									"    pm.expect(jsonData.user).to.not.have.property('password');",
									"});",
									"",
									"pm.test(\"Initial items sorted count is 0\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.user.itemsSortedCount).to.equal(0);",
									"});",
									"",
									"pm.test(\"Save user data for subsequent tests\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"authToken\", jsonData.token);",
									"    pm.collectionVariables.set(\"userId\", jsonData.user._id);",
									"    pm.collectionVariables.set(\"userEmail\", jsonData.user.email);",
									"    pm.collectionVariables.set(\"username\", jsonData.user.username);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate random user data for testing",
									"const timestamp = Date.now();",
									"pm.collectionVariables.set(\"testUsername\", `testuser${timestamp}`);",
									"pm.collectionVariables.set(\"testEmail\", `test${timestamp}@example.com`);",
									"pm.collectionVariables.set(\"testPassword\", \"password123\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					}
				},
				{
					"name": "2. Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has user and token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData).to.have.property('token');",
									"});",
									"",
									"pm.test(\"Update auth token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.collectionVariables.set(\"authToken\", jsonData.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"{{testEmail}}\",\n    \"password\": \"{{testPassword}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/auth/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					}
				},
				{
					"name": "3. Get Current User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",									"pm.test(\"Response has user data\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('user');",
									"    pm.expect(jsonData.user).to.have.property('itemsSortedCount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					}
				}
			]
		},
		{
			"name": "Prediction API Tests",
			"item": [
				{
					"name": "1. Health Check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200 or 503\", function () {",
									"    pm.expect([200, 503]).to.include(pm.response.code);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData).to.have.property('timestamp');",
									"});",
									"",
									"pm.test(\"Check if YOLO service is available\", function () {",
									"    var jsonData = pm.response.json();",
									"    if (jsonData.success) {",
									"        pm.collectionVariables.set(\"yoloServiceAvailable\", \"true\");",
									"        console.log(\"✅ YOLO service is available\");",
									"    } else {",
									"        pm.collectionVariables.set(\"yoloServiceAvailable\", \"false\");",
									"        console.log(\"❌ YOLO service is not available - prediction tests will be skipped\");",
									"    }",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/prediction/health",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"health"
							]
						}
					}
				},
				{
					"name": "2. Predict Without Auth (Anonymous)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const yoloAvailable = pm.collectionVariables.get(\"yoloServiceAvailable\");",
									"",
									"if (yoloAvailable === \"true\") {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response has expected structure\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('success');",
									"        pm.expect(jsonData).to.have.property('message');",
									"        pm.expect(jsonData).to.have.property('filename');",
									"    });",
									"    ",									"    pm.test(\"No user items sorted count for anonymous user\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.not.have.property('userItemsSortedCount');",
									"    });",
									"} else {",
									"    pm.test(\"Skipping test - YOLO service not available\", function () {",
									"        pm.expect(true).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"predict"
							]
						}
					}
				},
				{
					"name": "3. Predict With Auth (Logged-in User)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const yoloAvailable = pm.collectionVariables.get(\"yoloServiceAvailable\");",
									"",
									"if (yoloAvailable === \"true\") {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    pm.test(\"Response has expected structure\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.have.property('success');",
									"        pm.expect(jsonData).to.have.property('message');",
									"        pm.expect(jsonData).to.have.property('filename');",
									"    });",
									"    ",									"    pm.test(\"Still no items sorted count (only increments on disposal)\", function () {",
									"        var jsonData = pm.response.json();",
									"        pm.expect(jsonData).to.not.have.property('userItemsSortedCount');",
									"    });",
									"    ",
									"    pm.test(\"Save prediction data for disposal confirmation\", function () {",
									"        var jsonData = pm.response.json();",
									"        if (jsonData.data && !jsonData.data.noObjectsDetected) {",
									"            pm.collectionVariables.set(\"predictionMade\", \"true\");",
									"        } else {",
									"            pm.collectionVariables.set(\"predictionMade\", \"false\");",
									"        }",
									"    });",
									"} else {",
									"    pm.test(\"Skipping test - YOLO service not available\", function () {",
									"        pm.expect(true).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"predict"
							]
						}
					}
				},
				{
					"name": "4. Predict Annotated With Auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const yoloAvailable = pm.collectionVariables.get(\"yoloServiceAvailable\");",
									"",
									"if (yoloAvailable === \"true\") {",
									"    pm.test(\"Status code is 200\", function () {",
									"        pm.response.to.have.status(200);",
									"    });",
									"    ",
									"    const contentType = pm.response.headers.get('Content-Type');",
									"    ",
									"    if (contentType && contentType.includes('image')) {",
									"        pm.test(\"Response is an image\", function () {",
									"            pm.expect(contentType).to.include('image');",
									"        });",
									"        ",
									"        pm.test(\"Image has proper disposition header\", function () {",
									"            const disposition = pm.response.headers.get('Content-Disposition');",
									"            pm.expect(disposition).to.include('inline');",
									"            pm.expect(disposition).to.include('annotated_');",
									"        });",
									"    } else {",
									"        pm.test(\"Response is JSON (no objects detected)\", function () {",
									"            pm.expect(contentType).to.include('application/json');",
									"        });",
									"    }",
									"} else {",
									"    pm.test(\"Skipping test - YOLO service not available\", function () {",
									"        pm.expect(true).to.be.true;",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": []
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/predict-annotated",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"predict-annotated"
							]
						}
					}
				}
			]
		},
		{
			"name": "Disposal Confirmation Flow",
			"item": [
				{
					"name": "1. Confirm Disposal (Authenticated)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response has expected structure\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success');",
									"    pm.expect(jsonData).to.have.property('message');",									"    pm.expect(jsonData).to.have.property('userItemsSortedCount');",
									"});",
									"",
									"pm.test(\"Items sorted count incremented\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.userItemsSortedCount).to.be.above(0);",
									"    pm.collectionVariables.set(\"currentItemsSortedCount\", jsonData.userItemsSortedCount);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/disposal-confirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"disposal-confirmation"
							]
						}
					}
				},
				{
					"name": "2. Confirm Multiple Disposals",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Prediction count incremented again\", function () {",
									"    var jsonData = pm.response.json();",									"    const previousCount = parseInt(pm.collectionVariables.get(\"currentItemsSortedCount\"));",
									"    pm.expect(jsonData.userItemsSortedCount).to.equal(previousCount + 1);",
									"    pm.collectionVariables.set(\"currentItemsSortedCount\", jsonData.userItemsSortedCount);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/disposal-confirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"disposal-confirmation"
							]
						}
					}
				},
				{
					"name": "3. Try Disposal Without Auth (Should Fail)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Error message indicates authentication required\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', false);",
									"    pm.expect(jsonData.message).to.include('Authentication required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/disposal-confirmation",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"disposal-confirmation"
							]
						}
					}
				}
			]
		},
		{
			"name": "Verification Flow",
			"item": [
				{
					"name": "1. Verify User Prediction Count",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"User prediction count matches expected\", function () {",
									"    var jsonData = pm.response.json();",									"    const expectedCount = parseInt(pm.collectionVariables.get(\"currentItemsSortedCount\"));",
									"    pm.expect(jsonData.user.itemsSortedCount).to.equal(expectedCount);",
									"});",
									"",
									"pm.test(\"Final verification summary\", function () {",
									"    var jsonData = pm.response.json();",
									"    console.log(`✅ User successfully completed ${jsonData.user.itemsSortedCount} waste sorting actions`);",
									"    console.log(`📊 Final Stats:`);;",
									"    console.log(`   - Username: ${jsonData.user.username}`);",
									"    console.log(`   - Email: ${jsonData.user.email}`);",
									"    console.log(`   - Total Items Sorted: ${jsonData.user.itemsSortedCount}`);",
									"    console.log(`   - Account Created: ${jsonData.user.createdAt}`);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{authToken}}"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/api/auth/me",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						}
					}
				}
			]
		},
		{
			"name": "Error Handling Tests",
			"item": [
				{
					"name": "1. Predict Without File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Error message indicates no file uploaded\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('success', false);",
									"    pm.expect(jsonData.message).to.include('No file uploaded');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"predict"
							]
						}
					}
				},
				{
					"name": "2. Predict With Invalid Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// For optional auth endpoints, invalid token should not cause failure",
									"// The request should proceed but without user context",
									"pm.test(\"Status code should be related to missing file, not auth\", function () {",
									"    pm.response.to.have.status(400); // Because no file is uploaded",
									"});",
									"",
									"pm.test(\"Error should be about missing file, not token\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include('No file uploaded');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer invalid_token_123"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": []
						},
						"url": {
							"raw": "{{baseUrl}}/api/prediction/predict",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"prediction",
								"predict"
							]
						}
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log(`🚀 Running: ${pm.info.requestName}`);",
					"",
					"// Set base URL if not already set",
					"if (!pm.collectionVariables.get(\"baseUrl\")) {",
					"    pm.collectionVariables.set(\"baseUrl\", \"http://localhost:3001\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"console.log(`✅ Completed: ${pm.info.requestName} - Status: ${pm.response.code}`);",
					"",
					"// Log response time",
					"console.log(`⏱️  Response time: ${pm.response.responseTime}ms`);"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:3001",
			"type": "string"
		},
		{
			"key": "authToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "userEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "testUsername",
			"value": "",
			"type": "string"
		},
		{
			"key": "testEmail",
			"value": "",
			"type": "string"
		},
		{
			"key": "testPassword",
			"value": "",
			"type": "string"
		},		{
			"key": "currentItemsSortedCount",
			"value": "0",
			"type": "string"
		},
		{
			"key": "yoloServiceAvailable",
			"value": "false",
			"type": "string"
		},
		{
			"key": "predictionMade",
			"value": "false",
			"type": "string"
		}
	]
}
